% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Circuits.R
\name{circuit_dag}
\alias{circuit_dag}
\title{Circuit Dag}
\usage{
circuit_dag(
  can_reorder,
  incoming_graph_data = NULL,
  device = unconstrained_device()
)
}
\arguments{
\item{can_reorder}{A predicate that determines if two operations may be reordered.
Graph edges are created for pairs of operations where this returns False.
The default predicate allows reordering only when the operations donâ€™t share common qubits.}

\item{incoming_graph_data}{Data in initialize the graph. This can be any value
supported by networkx.DiGraph() e.g. an edge list or another graph.}

\item{device}{Hardware that the circuit should be able to run on.}
}
\value{
Initialized Circuit Dag.
}
\description{
A representation of a Circuit as a directed acyclic graph.
}
\details{
Nodes of the graph are instances of Unique containing each operation of a
circuit. Edges of the graph are lists of nodes. Each edge specifies a required
application order between two operations. The first must be applied before
the second. The graph is maximalist (transitive completion).
}
\seealso{
Other Circuits: 
\code{\link{circuit}()},
\code{\link{gate_operation_}()},
\code{\link{gate_parallel_operation}()},
\code{\link{insert_strategy}()},
\code{\link{moment}()},
\code{\link{qubit_order_or_list}()},
\code{\link{qubit_order}()},
\code{\link{tree_flatten_op}()},
\code{\link{tree_op}()}
}
\concept{Circuits}
