% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Unitary_Gates.R
\name{gate_Gate}
\alias{gate_Gate}
\title{Gate}
\usage{
gate_Gate(...)
}
\arguments{
\item{...}{parameters to pass}
}
\value{
None
}
\description{
An operation type that can be applied to a collection of qubits.
}
\details{
Gates can be applied to qubits by calling their on() method with
the qubits to be applied to supplied, or, alternatively, by simply
calling the gate on the qubits. In other words calling `MyGate.on(q1, q2)`
to create an Operation on q1 and q2 is equivalent to `MyGate(q1,q2)`.
Gates operate on a certain number of qubits. All implementations of gate
must implement the num_qubits method declaring how many qubits they
act on. The gate feature classes SingleQubitGate and TwoQubitGate
can be used to avoid writing this boilerplate.
Linear combinations of gates can be created by adding gates together and
multiplying them by scalars.
}
\seealso{
Other Unitary gates and operations: 
\code{\link{gate_ccnot_pow}()},
\code{\link{gate_ccnot}()},
\code{\link{gate_ccx_pow}()},
\code{\link{gate_ccx}()},
\code{\link{gate_ccz_pow}()},
\code{\link{gate_ccz}()},
\code{\link{gate_cnot_pow}()},
\code{\link{gate_cnot}()},
\code{\link{gate_controlled}()},
\code{\link{gate_cs_wap}()},
\code{\link{gate_cx_pow}()},
\code{\link{gate_cx}()},
\code{\link{gate_cz_pow}()},
\code{\link{gate_cz}()},
\code{\link{gate_eigen}()},
\code{\link{gate_fredkin}()},
\code{\link{gate_fsim}()},
\code{\link{gate_givens}()},
\code{\link{gate_global_phase_operation}()},
\code{\link{gate_hpow}()},
\code{\link{gate_h}()},
\code{\link{gate_identity_each}()},
\code{\link{gate_identity}()},
\code{\link{gate_is_wap_pow}()},
\code{\link{gate_iswap}()},
\code{\link{gate_i}()},
\code{\link{gate_matrix}()},
\code{\link{gate_operation}()},
\code{\link{gate_phase_gradient}()},
\code{\link{gate_phased_is_wap_pow}()},
\code{\link{gate_phased_xz}()},
\code{\link{gate_quantum_fourier_transform}()},
\code{\link{gate_riswap}()},
\code{\link{gate_rx}()},
\code{\link{gate_ry}()},
\code{\link{gate_single_qubit}()},
\code{\link{gate_swap_pow}()},
\code{\link{gate_swap}()},
\code{\link{gate_s}()},
\code{\link{gate_tagged_opertaion}()},
\code{\link{gate_three_qubit_diagonal}()},
\code{\link{gate_three_qubit}()},
\code{\link{gate_toffoli}()},
\code{\link{gate_t}()},
\code{\link{gate_wait}()},
\code{\link{gate_x_pow}()},
\code{\link{gate_xx_pow}()},
\code{\link{gate_xx}()},
\code{\link{gate_x}()},
\code{\link{gate_y_pow}()},
\code{\link{gate_yy_pow}()},
\code{\link{gate_yy}()},
\code{\link{gate_y}()},
\code{\link{gate_z_pow}()},
\code{\link{gate_zz_pow}()},
\code{\link{gate_zz}()},
\code{\link{gate_z}()}
}
\concept{Unitary gates and operations}
